name: Docker Build and Push

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
    inputs:
      tags:
        description: '请输入要操作的tags名称，例如v1.0.0'
  push:
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # 支持的构建平台
  PLATFORMS: linux/amd64,linux/arm64


jobs:
  build:

    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取完整历史，有助于构建缓存

      # 安装cosign工具（用于镜像签名），PR时不需要
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # 配置Docker Buildx，支持多平台构建和缓存
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # 登录到容器仓库，PR时不需要推送，所以不登录
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取Docker元数据（标签、标签等）
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # 只使用推送的标签作为镜像标签
          tags: |
            type=ref,event=tag
            # 可选：添加latest标签（当推送的是最新版本时）
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}



        # 保存Docker镜像到本地
      - name: Save Docker image
        run: |
          # 从元数据中获取镜像标签
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          # 保存镜像为tar文件
          docker save -o external-order-service.tar $IMAGE_TAG
     

      # 安装 sshpass 用于通过密码 SSH 传输文件
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # 通过 SSH 将压缩包传输到云服务器并部署
      - name: Send to cloud server
        env:
          # 从 Secrets 中获取服务器信息（提前在仓库添加这些 Secret）
          SSH_HOST: ${{ secrets.SSH_HOST }}       # 云服务器 IP
          SSH_USER: ${{ secrets.SSH_USER }}       # 登录用户名（如 root）
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }} # 登录密码
          REMOTE_DIR: /app/ExternalOrder           # 服务器上的部署目录
        run: |
          # 创建远程目录（若不存在）
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "mkdir -p $REMOTE_DIR"
          
          # 将压缩包上传到云服务器
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no ./external-order-service.tar $SSH_USER@$SSH_HOST:$REMOTE_DIR/
          
      - name: Deploy to Cloud Server
        # 使用ssh-action插件部署到云服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: /app/ExternalOrder/update-app.sh  # 执行云服务器上的脚本
